openapi: 3.0.1
info:
  title: ""
  description: ""
  version: 0.0.1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Search
    description: API routes to search for journeys. These routes can be left opened to public.

#
# API Routes
#
paths:
  /driver_journeys:
    get:
      tags:
      - Search
      summary: Search for matching punctual planned outward driver journeys.
      description: Route used to retrieve a collection of punctual planned outward driver journeys matching the provided criteria.
      operationId: getDriverJourneys
      parameters:
        - $ref: '#/components/parameters/departureLat'
        - $ref: '#/components/parameters/departureLng'
        - $ref: '#/components/parameters/arrivalLat'
        - $ref: '#/components/parameters/arrivalLng'
        - $ref: '#/components/parameters/departureDate'
        - $ref: '#/components/parameters/timeDelta'
        - $ref: '#/components/parameters/departureRadius'
        - $ref: '#/components/parameters/arrivalRadius'
        - $ref: '#/components/parameters/count'
      responses:
        200:
          description: Ok. Request processed successfully.
          content:
            application/json:
              schema:
                title: DriverJourneys
                type: array
                items:
                  $ref: '#/components/schemas/DriverJourney'
        400:
          description: Bad Request. See error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: |-
                      Explain why the request couldn't be processed.
        401:
          description: Unauthorized. You must authenticate.
        429:
          description: Too Many Requests. Please slow down.
          headers:
            Retry-After:
              description: |-
                How long to wait before making a new request (in seconds).
              schema:
                type: integer
        500:
          description: Internal Server Error. Please try again later.


  /passenger_journeys:
    get:
      tags:
      - Search
      summary: Search for matching punctual planned outward passenger journeys.
      description: Route used to retrieve a collection of punctual planned outward passenger journeys matching the provided criteria.
      operationId: getPassengerJourneys
      parameters:
        - $ref: '#/components/parameters/departureLat'
        - $ref: '#/components/parameters/departureLng'
        - $ref: '#/components/parameters/arrivalLat'
        - $ref: '#/components/parameters/arrivalLng'
        - $ref: '#/components/parameters/departureDate'
        - $ref: '#/components/parameters/timeDelta'
        - $ref: '#/components/parameters/departureRadius'
        - $ref: '#/components/parameters/arrivalRadius'
        - $ref: '#/components/parameters/count'
      responses:
        200:
          description: Ok. Request processed successfully.
          content:
            application/json:
              schema:
                title: PassengerJourneys
                type: array
                items:
                  $ref: '#/components/schemas/PassengerJourney'
        400:
          description: Bad Request. See error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: |-
                      Explain why the request couldn't be processed.
        401:
          description: Unauthorized. You must authenticate.
        429:
          description: Too Many Requests. Please slow down.
          headers:
            Retry-After:
              description: |-
                How long to wait before making a new request (in seconds).
              schema:
                type: integer
        500:
          description: Internal Server Error. Please try again later.

  /driver_regular_trips:
    get:
      tags:
      - Search
      summary: Search for matching regular driver trips.
      description: Route used to retrieve a collection of driver regular trips matching the provided criteria.
      operationId: getDriverRegularTrips
      parameters:
        - $ref: '#/components/parameters/departureLat'
        - $ref: '#/components/parameters/departureLng'
        - $ref: '#/components/parameters/arrivalLat'
        - $ref: '#/components/parameters/arrivalLng'
        - $ref: '#/components/parameters/departureTimeOfDay'
        - $ref: '#/components/parameters/timeDelta'
        - $ref: '#/components/parameters/departureRadius'
        - $ref: '#/components/parameters/arrivalRadius'
        - $ref: '#/components/parameters/maxDepartureDate'
        - $ref: '#/components/parameters/count'
      responses:
        200:
          description: Ok. Request processed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/DriverTrip'
                    - type: object
                      properties:
                        schedules:
                          type: array
                          items:
                            $ref: '#/components/schemas/Schedule'

  /passenger_regular_trips:
    get:
      tags:
      - Search
      summary: Search for matching passenger regular trips.
      description: Route used to retrieve a collection of passenger regular trips matching the provided criteria.
      operationId: getPassengerRegularTrips
      parameters:
        - $ref: '#/components/parameters/departureLat'
        - $ref: '#/components/parameters/departureLng'
        - $ref: '#/components/parameters/arrivalLat'
        - $ref: '#/components/parameters/arrivalLng'
        - $ref: '#/components/parameters/departureTimeOfDay'
        - $ref: '#/components/parameters/timeDelta'
        - $ref: '#/components/parameters/departureRadius'
        - $ref: '#/components/parameters/arrivalRadius'
        - $ref: '#/components/parameters/maxDepartureDate'
        - $ref: '#/components/parameters/count'
      responses:
        200:
          description: Ok. Request processed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/PassengerTrip'
                    - type: object
                      properties:
                        schedules:
                          type: array
                          items:
                            $ref: '#/components/schemas/Schedule'

  /journeys:
    get:
      tags:
      - Search
      summary: Get journeys by their ids.
      description: Route used to retrieve journeys using their identifiers.
      operationId: getJourneys
      parameters:
        - in: query
          name: ids[]
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 255
      responses:
        200:
          description: Ok. Request processed successfully.
          content:
            application/json:
              schema:
                title: Journey
                oneOf:
                - $ref: '#/components/schemas/DriverJourney'
                - $ref: '#/components/schemas/PassengerJourney'

  /status:
    get:
      tags:
      - status
      summary: Give health status of the webservice.
      responses:
        200:
          description: Ok. Webservice is available.
        429:
          description: Too Many Requests. Please slow down.
          headers:
            Retry-After:
              description: |-
                How long to wait before making a new request (in seconds).
              schema:
                type: integer
        500:
          description: Internal Server Error. Please try again later.

#
# Schemas
#
components:

  parameters:

    departureLat:
      name: departureLat
      in: query
      required: true
      schema:
        type: number
      description: Latitude of searched departure point.


    departureLng:
      name: departureLng
      in: query
      description: Longitude of searched departure point.
      required: true
      schema:
        type: number

    arrivalLat:
      name: arrivalLat
      in: query
      description: Latitude of searched arrival point.
      required: true
      schema:
        type: number

    arrivalLng:
      name: arrivalLng
      in: query
      description: Longitude of searched arrival point.
      required: true
      schema:
        type: number

    departureDate:
      name: departureDate
      in: query
      description: Departure datetime using a UNIX UTC timestamp in seconds.
      schema:
        type: integer

    departureTimeOfDay:
      name: departureTimeOfDay
      in: query
      description: |-
        Departure time of day represented as
        [RFC3339 partial-time](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
      required: true
      schema:
        type: string
        format: partial-time

    timeDelta:
      name: timeDelta
      in: query
      description: Time margin in seconds. The retrieved journeys must match the
        given time parameters within a +`timeDelta` / -`timeDelta` interval .
      schema:
        type: integer
        default: 900

    maxDepartureDate:
      name: maxDepartureDate
      in: query
      description: |-
        Maximum date of departure for the returned journeys. Datetime using
        a UNIX UTC timestamp in seconds.
      schema:
        type: integer

    departureRadius:
      name: departureRadius
      in: query
      description: Search radius in kilometers around the departure point.
      schema:
        type: number
        default: 1.0

    arrivalRadius:
      name: arrivalRadius
      in: query
      description: Search radius in kilometers around the arrival point.
      schema:
        type: number
        default: 1.0

    count:
      name: count
      in: query
      description: Maximum number of returned journeys. If missing, all matching
        journeys are returned.
      schema:
        type: integer

  schemas:
    Trip:
      title: Trip
      required:
        - duration
        - passengerPickupLat
        - passengerPickupLng
        - passengerDropLat
        - passengerDropLng
      properties:
        passengerPickupLat:
          type: "number"
          format: "double"
          description: Latitude of the passenger pick-up point.
        passengerPickupLng:
          type: "number"
          format: "double"
          description: Longitude of the passenger pick-up point.
        passengerDropLat:
          type: "number"
          format: "double"
          description: Latitude of the passenger drop-off point.
        passengerDropLng:
          type: "number"
          format: "double"
          description: Longitude of the passenger drop-off point.
        passengerPickupAddress:
          type: string
          description: String representing the pickup-up address.
        passengerDropAddress:
          type: string
          description: String representing the drop-off address.
        distance:
          type: "integer"
          description: Carpooling distance in meters.
        driverDepartureLat:
          type: "number"
          format: "double"
          description: Latitude of the departure.
        driverDepartureLng:
          type: "number"
          format: "double"
          description: Longitude of the departure.
        driverArrivalLat:
          type: "number"
          format: "double"
          description: Latitude of the arrival.
        driverArrivalLng:
          type: "number"
          format: "double"
          description: Longitude of the arrival.
        driverDepartureAddress:
          type: string
          description: String representing the departure address of the driver.
        driverArrivalAddress:
          type: string
          description: String representing the arrival address of the driver.
        duration:
          type: integer
          description: Carpooling duration in seconds.
        journeyPolyline:
          type: string
          description: |-
            Carpooling journey itinerary as a
            [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), compressed at  level 5.
        preferences:
          $ref: '#/components/schemas/Preferences'

    DriverTrip:
      title: DriverTrip
      allOf:
        - $ref: '#/components/schemas/Trip'
        - type: object
          required:
            - driver
          properties:
            driver:
              $ref: '#/components/schemas/User'
            departureToPickupWalkingDistance:
              type: integer
              description: |-
                Walking distance from the requested departure location
                to the pick-up location.
            departureToPickupWalkingDuration:
              type: integer
              description: |-
                Walking duration from the requested departure location
                to the pick-up location.
            departureToPickupWalkingPolyline:
              type: string
              description: |-
                Walking
                [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
                from the requested departure location to the pick-up location.
            dropoffToArrivalWalkingDistance:
              type: integer
              description: |-
                Walking distance to the requested arrival location
                from the drop-off location.
            dropoffToArrivalWalkingDuration:
              type: integer
              description: |-
                Walking duration to the requested arrival location
                from the drop-off location.
            dropoffToArrivalWalkingPolyline:
              type: string
              description: |-
                Walking
                [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
                to the requested arrival location from the drop-off location.
            car:
              $ref: '#/components/schemas/Car'

    PassengerTrip:
      title: PassengerTrip
      allOf:
        - $ref: '#/components/schemas/Trip'
        - type: object
          required:
            - passenger
          properties:
            passenger:
              $ref: '#/components/schemas/User'

    Journey:
      title: Journey
      allOf:
        - $ref: '#/components/schemas/Trip'
        - type: object
          required:
            - passengerPickupDate
            - type
            - webUrl
          properties:
            id:
              type: string
              minLength: 1
              maxLength: 255
              description: Journey's id. It MUST be unique for a given operator.
            passengerPickupDate:
              type: number
              description: |-
                Passenger pickup datetime as a UNIX UTC timestamp in seconds.
              format: long
            driverDepartureDate:
              type: number
              description: |-
                Driver departure datetime as a UNIX UTC timestamp in seconds.
              format: long
            webUrl:
              type: string
              description: URL of the journey on the webservice provider platform.
            type:
              type: string
              description: |-
                Type of journey. A dynamic journey is happening in real time.
              enum:
              - PLANNED
              - DYNAMIC
              - LINE
            deepLink:
              $ref: '#/components/schemas/DeepLink'

    DriverJourney:
      allOf:
        - $ref: '#/components/schemas/DriverTrip'
        - $ref: '#/components/schemas/Journey'
        - type: object
          properties:
            availableSeats:
              type: integer
              description: Available seats in the car.
            price:
              $ref: '#/components/schemas/Price'

    PassengerJourney:
      allOf:
        - $ref: '#/components/schemas/PassengerTrip'
        - $ref: '#/components/schemas/Journey'
        - type: object
          required:
            - driverDepartureDate
          properties:
            requestedSeats:
              type: integer
              description: Requested seats by the passenger.

    Schedule:
      type: object
      properties:
        passengerPickupDay:
          type: string
          description: Day of week of the passenger pick-up.
          enum:
            - mon
            - tue
            - wed
            - thu
            - fri
            - sat
            - sun
        passengerPickupTimeOfDay:
          description: |-
            Passenger pick-up time of day represented as
            [RFC3339 partial-time](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
          type: string
          format: partial-time
        journeyIds:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 255
            description: Journey's id. It MUST be unique for a given operator.

    Price:
      type: object
      properties:
        type:
          type: string
          description: |-
            Either « FREE », « PAYING » or « UNKNOWN ». « UNKNOWN » is given
            when it should be « PAYING » but we cannot set the price yet.
          enum:
          - FREE
          - PAYING
          - UNKNOWN
        amount:
          type: number
          description: Carpooling passenger cost.
          format: float
        currency:
          type: string
          description: ISO 4217 code representing the currency of the price.

    User:
      type: object
      required:
        - id
        - alias
      properties:
        id:
          type: string
          description: User's unique identifier.
        alias:
          type: string
          description: User's alias.
        firstName:
          type: string
          description: User's first name.
        lastName:
          type: string
          description: User's last name.
        grade:
          type: integer
          minimum: 1
          maximum: 5
          description: User's grade from 1 to 5.
        picture:
          type: string
          description: User's profile picture absolute URL.
        gender:
          type: string
          description: User's gender. 'O' stands for 'Other'.
          enum:
            - F
            - M
            - O
        verifiedIdentity:
          type: boolean
          description: true if the identity of this user has been verified by the operator or a third party; and the firstName, lastName, birthdate have been confirmed as identitical to an official identity proof document. Can be left empty if the information is not available.


    Preferences:
      type: object
      properties:
        smoking:
          type: boolean
          description: |-
            If driver journey, specifies if the driver allows smoking in the car.
        animals:
          type: boolean
          description: |-
            If driver journey, specifies if the driver allows animals in the car.
        music:
          type: boolean
          description: |-
            If driver journey, specifies if the driver enjoys music in the car.
        isTalker:
          type: boolean
          description: |-
            If driver journey, specifies if the driver enjoys talking with passengers.
        luggageSize:
          type: integer
          minimum: 1
          maximum: 5
          description: |-
            If driver journey, specifies the size of allowed luggages.
            From very small (1) to very big (5).

    Car:
      type: object
      properties:
        model:
          type: string
          description: Model of the car.
        brand:
          type: string
          description: Brand of the car.

    DeepLink:
      type: object
      description: Platform specific deep-link configurations.
      properties:
        android:
          type: object
          properties:
            uri:
              type: string
              description: |-
                URI compliant with Android conventions to open the webservice
                provider mobile app on the screen presenting the specific journey
                (see [this guide](https://blog.branch.io/technical-guide-to-deep-linking-on-android-chrome-intents/) for more details).
            storeUrl:
              type: string
              description: |-
                URL of the webservice provider mobile app on the PlayStore
                in case the app is not yet installed on the device.
        ios:
          type: object
          properties:
            universalLink:
              type: string
              description: |-
                URI compliant with iOS conventions to open the webservice
                provider mobile app on the screen presenting the specific journey.
