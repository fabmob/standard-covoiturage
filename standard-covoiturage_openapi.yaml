openapi: 3.0.1
info:
  title: ""
  description: ""
  version: 0.0.1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Search
    description: API routes to search for journeys. These routes can be left opened to public.
  - name: status
    description: status routes
  - name: NORMATIVE
    description: API routes which must be used the implementers of the standard if implementing the given use case.
  - name: INFORMATIVE
    description: API routes which can be freely used or not by the implementers of the standard.

#
# API Routes    
#
paths:
  /driver_journeys:
    get:
      tags:
      - Search
      - INFORMATIVE
      summary: Search for matching punctual planned outward driver journeys.
      description: Route used to retrieve a collection of punctual planned outward driver journeys matching the provided criteria.
      operationId: getDriverJourneys
      parameters:
        - $ref: '#/components/parameters/departureLat'
        - $ref: '#/components/parameters/departureLng'
        - $ref: '#/components/parameters/arrivalLat'
        - $ref: '#/components/parameters/arrivalLng'
        - $ref: '#/components/parameters/departureDate'
        - $ref: '#/components/parameters/timeDelta'
        - $ref: '#/components/parameters/departureRadius'
        - $ref: '#/components/parameters/arrivalRadius'
        - $ref: '#/components/parameters/count'
      responses:
        200:
          description: Ok. Request processed successfully.
          content:
            application/json:
              schema:
                title: DriverJourneys
                type: array
                items:
                  $ref: '#/components/schemas/DriverJourney'
        400:
          description: Bad Request. See error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: |-
                      Explain why the request couldn't be processed.
        401:
          description: Unauthorized. You must authenticate.
        429:
          description: Too Many Requests. Please slow down.
          headers:
            Retry-After:
              description: |-
                How long to wait before making a new request (in seconds).
              schema:
                type: integer
        500:
          description: Internal Server Error. Please try again later.


  /passenger_journeys:
    get:
      tags:
      - Search
      - INFORMATIVE
      summary: Search for matching punctual planned outward passenger journeys.
      description: Route used to retrieve a collection of punctual planned outward passenger journeys matching the provided criteria.
      operationId: getPassengerJourneys
      parameters:
        - $ref: '#/components/parameters/departureLat'
        - $ref: '#/components/parameters/departureLng'
        - $ref: '#/components/parameters/arrivalLat'
        - $ref: '#/components/parameters/arrivalLng'
        - $ref: '#/components/parameters/departureDate'
        - $ref: '#/components/parameters/timeDelta'
        - $ref: '#/components/parameters/departureRadius'
        - $ref: '#/components/parameters/arrivalRadius'
        - $ref: '#/components/parameters/count'
      responses:
        200:
          description: Ok. Request processed successfully.
          content:
            application/json:
              schema:
                title: PassengerJourneys
                type: array
                items:
                  $ref: '#/components/schemas/PassengerJourney'
        400:
          description: Bad Request. See error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: |-
                      Explain why the request couldn't be processed.
        401:
          description: Unauthorized. You must authenticate.
        429:
          description: Too Many Requests. Please slow down.
          headers:
            Retry-After:
              description: |-
                How long to wait before making a new request (in seconds).
              schema:
                type: integer
        500:
          description: Internal Server Error. Please try again later.
          

  /versatile_journeys:
    get:
      tags:
      - Search
      - INFORMATIVE
      summary: Search for matching punctual/regular planned outward driver/passenger journeys.
      description: Route used to retrieve a collection of punctual planned outward passenger journeys matching the provided criteria.
      operationId: getExtendedJourneys
      parameters:
        - $ref: '#/components/parameters/departureLat'
        - $ref: '#/components/parameters/departureLng'
        - $ref: '#/components/parameters/arrivalLat'
        - $ref: '#/components/parameters/arrivalLng'
        - $ref: '#/components/parameters/departureDate'
        - $ref: '#/components/parameters/timeDelta'
        - $ref: '#/components/parameters/departureRadius'
        - $ref: '#/components/parameters/arrivalRadius'
        - $ref: '#/components/parameters/count'
      responses:
        200:
          description: Ok. Request processed successfully.
          content:
            application/json:
              schema:
                title: VersatileJourneys
                type: array
                items:
                  $ref: '#/components/schemas/VersatileJourney'
        400:
          description: Bad Request. See error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: |-
                      Explain why the request couldn't be processed.
        401:
          description: Unauthorized. You must authenticate.
        429:
          description: Too Many Requests. Please slow down.
          headers:
            Retry-After:
              description: |-
                How long to wait before making a new request (in seconds).
              schema:
                type: integer
        500:
          description: Internal Server Error. Please try again later.

  /status:
    get:
      tags:
      - status
      - INFORMATIVE
      summary: Give health status of the webservice.
      responses:
        200:
          description: Ok. Webservice is available.
        429:
          description: Too Many Requests. Please slow down.
          headers:
            Retry-After:
              description: |-
                How long to wait before making a new request (in seconds).
              schema:
                type: integer
        500:
          description: Internal Server Error. Please try again later.

#
# Schemas 
#              
components:

  parameters:
  
    departureLat:
      name: departureLat
      in: query
      required: true
      schema:
        type: number
      description: Latitude of searched departure point.
      
      
    departureLng:  
      name: departureLng
      in: query
      description: Longitude of searched departure point.
      required: true
      schema:
        type: number
    
    arrivalLat:
      name: arrivalLat
      in: query
      description: Latitude of searched arrival point.
      required: true
      schema:
        type: number
    
    arrivalLng:    
      name: arrivalLng
      in: query
      description: Longitude of searched arrival point.
      required: true
      schema:
        type: number
        
    departureDate:
      name: departureDate
      in: query
      description: Departure datetime using a UNIX UTC timestamp in seconds. 
      schema:
        type: integer
            
    timeDelta:
      name: timeDelta
      in: query
      description: Time margin in seconds. The retrieved journeys must match the
        given time parameters within a +`timeDelta` / -`timeDelta` interval .
      schema:
        type: integer
        default: 900
        
    departureRadius:
      name: departureRadius
      in: query
      description: Search radius in kilometers around the departure point.
      schema:
        type: number
        default: 1.0
        
    arrivalRadius:
      name: arrivalRadius
      in: query
      description: Search radius in kilometers around the arrival point.
      schema:
        type: number
        default: 1.0
        
    count:
      name: count
      in: query
      description: Maximum number of returned journeys. If missing, all matching
        journeys are returned.
      schema:
        type: integer
        
  schemas:
    Journey:
      title: Journey
      required:
      - id
      - duration
      - passengerPickupDate
      - passengerPickupLat
      - passengerPickupLng
      - passengerDropLat
      - passengerDropLng
      - type
      - webUrl
      type: object
      properties:
        id:
          $ref: '#/components/schemas/journeyId'
        passengerPickupDate:
          type: number
          description: |-
            Passenger pickup datetime as a UNIX UTC timestamp in seconds.
          format: long
        passengerPickupLat:
          type: "number"
          format: "double"
          description: Latitude of the passenger pick-up point.
        passengerPickupLng:
          type: "number"
          format: "double"
          description: Longitude of the passenger pick-up point.
        passengerDropLat:
          type: "number"
          format: "double"
          description: Latitude of the passenger drop-off point.
        passengerDropLng:
          type: "number"
          format: "double"
          description: Longitude of the passenger drop-off point.
        passengerPickupAddress:
          type: string
          description: String representing the pickup-up address.
        passengerDropAddress:
          type: string
          description: String representing the drop-off address.
        duration:
          type: integer
          description: Carpooling duration in seconds.
        webUrl:
          type: string
          description: URL of the journey on the webservice provider platform.
        type:
          type: string
          description: |-
            Type of journey. A dynamic journey is happening in real time.
          enum:
          - PLANNED
          - DYNAMIC
          - LINE
        distance:
          type: "integer"
          description: Carpooling distance in meters.
        driverDepartureDate:
          type: number
          description: |-
            Driver departure datetime as a UNIX UTC timestamp in seconds.
          format: long
        driverDepartureLat:
          type: "number"
          format: "double"
          description: Latitude of the departure.
        driverDepartureLng:
          type: "number"
          format: "double"
          description: Longitude of the departure.
        driverArrivalLat:
          type: "number"
          format: "double"
          description: Latitude of the arrival.
        driverArrivalLng:
          type: "number"
          format: "double"
          description: Longitude of the arrival.
        driverDepartureAddress:
          type: string
          description: String representing the departure address of the driver.
        driverArrivalAddress:
          type: string
          description: String representing the arrival address of the driver.
        journeyPolyline:
          type: string
          description: |-
            Carpooling journey itinerary as a
            [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), compressed at  level 5.
        price:
          $ref: '#/components/schemas/Price'
        preferences:
          $ref: '#/components/schemas/Preferences'
        deepLink:
          $ref: '#/components/schemas/DeepLink'
          
    DriverJourney:
      allOf:
        - $ref: '#/components/schemas/Journey'
        - type: object
          required:
            - driver
          properties:
            driver:
              $ref: '#/components/schemas/User'
            availableSeats:
              type: integer
              description: If a driver journey, available seats.
            car:
              $ref: '#/components/schemas/Car'
            departureToPickupWalkingDuration:
              type: integer
              description: |-
                Walking duration from the requested departure location
                to the pick-up location.
            dropoffToArrivalWalkingDuration:
              type: integer
              description: |-
                Walking duration to the requested arrival location
                from the drop-off location.
            departureToPickupWalkingDistance:
              type: integer
              description: |-
                Walking distance from the requested departure location
                to the pick-up location.
            dropoffToArrivalWalkingDistance:
              type: integer
              description: |-
                Walking distance to the requested arrival location
                from the drop-off location.
            departureToPickupWalkingPolyline:
              type: string
              description: |-
                Walking
                [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
                from the requested departure location to the pick-up location.
            dropoffToArrivalWalkingPolyline:
              type: string
              description: |-
                Walking
                [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
                to the requested arrival location from the drop-off location.
  
            
    PassengerJourney:
      allOf:
        - $ref: '#/components/schemas/Journey'
        - type: object
          required:
            - passenger
            - driverDepartureDate
          properties:
            passenger:
              $ref: '#/components/schemas/User'
            requestedSeats:
              type: integer
              description: If a passenger journey, requested seats.
          
            
    VersatileJourney:
      allOf:
        - $ref: '#/components/schemas/Journey'
        - type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'
            operator:
              type: string
              description: Name of the operator owning this journey.
            operatorUrl:
              type: string
              description: Website of the operator owning this journey.
            availableSeats:
              type: integer
              description: If a driver journey, available seats.
            requestedSeats:
              type: integer
              description: If a passenger journey, requested seats.
            carpoolerType:  
              type: string
              description: Role of the carpooler.
              enum:
                - driver
                - passenger
                - both
              default: driver
            waypointsOnlyRoute:
              type: string
              description: Waypoints only route as [Google Encoded Polyline Algorithm Format](https://developers.google.com/maps/documentation/utilities/polylinealgorithm).
            numberOfWaypoints:
              type: integer
              description: Number of waypoints (if any).
            waypoints:
              type: array
              description: List of waypoints. Required if `numberOfWaypoints>0`.
              items:
                $ref: '#/components/schemas/Waypoint'
            frequency:
              type: string
              description: Frequency of the journey. We can have `frequency=both` only if parameter of GET /journeys.
              enum:
                - punctual
                - regular
                - both
              default: punctual
            details:
              type: string
              description: Free comment.
            nextReturnJourneyId:
              $ref: '#/components/schemas/journeyId'
            isStopped:
              type: integer
              description: 1 if the journey is now stopped.
              default: 0
            regularSchedule:
              description: Required if `frequency=regular`.
              allOf:
                - $ref: '#/components/schemas/RegularSchedule'
          
    Price:
      type: object
      properties:
        type:
          type: string
          description: |-
            Either « FREE », « PAYING » or « UNKNOWN ». « UNKNOWN » is given
            when it should be « PAYING » but we cannot set the price yet.
          enum:
          - FREE
          - PAYING
          - UNKNOWN
        amount:
          type: number
          description: Carpooling passenger cost.
          format: float
        currency:
          type: string
          description: ISO 4217 code representing the currency of the price.

    User:
      type: object
      required:
        - id
        - alias
      properties:
        id:
          type: string
          description: User's unique identifier.
        alias:
          type: string
          description: User's alias.
        firstName:
          type: string
          description: User's first name.
        lastName:
          type: string
          description: User's last name.
        grade:
          type: integer
          minimum: 1
          maximum: 5
          description: User's grade from 1 to 5.
        picture:
          type: string
          description: User's profile picture absolute URL.
        gender:
          type: string
          description: User's gender. 'O' stands for 'Other'.
          enum:
            - F
            - M
            - O
        verifiedIdentity:
          type: boolean
          description: true if the identity of this user has been verified by the operator or a third party; and the firstName, lastName, birthdate have been confirmed as identitical to an official identity proof document. Can be left empty if the information is not available.
          

    Preferences:
      type: object
      properties:
        smoking:
          type: boolean
          description: |-
            If driver journey, specifies if the driver allows smoking in the car.
        animals:
          type: boolean
          description: |-
            If driver journey, specifies if the driver allows animals in the car.
        music:
          type: boolean
          description: |-
            If driver journey, specifies if the driver enjoys music in the car.
        isTalker:
          type: boolean
          description: |-
            If driver journey, specifies if the driver enjoys talking with passengers.
        luggageSize:
          type: integer
          minimum: 1
          maximum: 5
          description: |-
            If driver journey, specifies the size of allowed luggages.
            From very small (1) to very big (5).

    Car:
      type: object
      properties:
        model:
          type: string
          description: Model of the car.
        brand:
          type: string
          description: Brand of the car.

    DeepLink:
      type: object
      description: Platform specific deep-link configurations.
      properties:
        android:
          type: object
          properties:
            uri:
              type: string
              description: |-
                URI compliant with Android conventions to open the webservice
                provider mobile app on the screen presenting the specific journey
                (see [this guide](https://blog.branch.io/technical-guide-to-deep-linking-on-android-chrome-intents/) for more details).
            storeUrl:
              type: string
              description: |-
                URL of the webservice provider mobile app on the PlayStore
                in case the app is not yet installed on the device.
        ios:
          type: object
          properties:
            universalLink:
              type: string
              description: |-
                URI compliant with iOS conventions to open the webservice
                provider mobile app on the screen presenting the specific journey.
                
    
    Waypoint:
      type: "object"
      required:
        - longitude
        - latitude
        - mandatory
      properties:
        longitude:
          description: WGS84 longitude of the geographical point.
          type: number
        latitude:
          description: WGS84 latitude of the geographical point.
          type: number
        address:
          type: string
          description: Full address of the geographical point.
        city:
          type: string
          description: City of the geographical point.
        postalCode:
          type: string
          description: Postal code of the geographical point.
        country:
          type: string
          description: Country of the geographical point.
        poiName:
          type: string
          description: Point-Of-Interest specific name if this geographical point is a POI.
        stepDistance:
          type: integer
          description: Distance in meters of the step from the previous point until this waypoint.
        stepDuration:
          type: integer
          description: Duration in seconds of the step from the previous point until this waypoint.
        type:
          type: string
          description: Type of waypoint.
          enum:
            - pick-up
            - drop-off
            - other
        mandatory:
          description: 1 if this waypoint is mandatory.
          type: integer
          enum:
            - 0
            - 1
    
    RegularSchedule:
      type: "object"
      properties:
        maxDate:
          type: integer
          description: If `frequency=regular` or `frequency=both`, `maxDate` specifies the specifies the end of the validity period for the regular journey, as a datetime using a UNIX UTC timestamp in seconds.
        schedule:
          type: "array"
          items:
            $ref: '#/components/schemas/WeekSchedule'
          description: If `frequency=regular`, this parameter specifies the schedule of expected regular journey. If several `WeekSchedule` objects are passed in the array, the journey is expected to happened on all given time slots(two departures the same day is considered a possible case).
    
    WeekSchedule:
      type: "object"
      properties:
        mondayTime:
          description: Time using a UTC partial time string (example "08:30:00") of departure for the journey on Mondays, if any.
          type: string
          format: partial-time
        mondayTimeDelta:
          description: Optional time margin in seconds. The departure is expected within a +`mondayTimeDelta` / -`mondayTimeDelta` interval around `mondayTime`. If missing, the `timeDelta` value of `journey` object will be used. If both are missing, 900 is the default value.
          type: integer
          default: 900
        tuesdayTime:
          description: Time using a UTC partial time string (example "08:30:00") of departure for the journey on Tuesdays, if any.
          type: string
          format: partial-time
        tuesdayTimeDelta:
          description: Optional time margin in seconds. The departure is expected within a +`tuesdayTimeDelta` / -`tuesdayTimeDelta` interval around `tuesdayTime`. If missing, the `timeDelta` value of `journey` object will be used. If both are missing, 900 is the default value.
          type: integer
          default: 900
        wednesdayTime:
          description: Time using a UTC partial time string (example "08:30:00") of departure for the journey on Wednesdays, if any.
          type: string
          format: partial-time
        wednesdayTimeDelta:
          description: Optional time margin in seconds. The departure is expected within a +`wednesdayTimeDelta` / -`wednesdayTimeDelta` interval around `wednesdayTime`. If missing, the `timeDelta` value of `journey` object will be used. If both are missing, 900 is the default value.
          type: integer
          default: 900
        thursdayTime:
          description: Time using a UTC partial time string (example "08:30:00") of departure for the journey on Thursdays, if any.
          type: string
          format: partial-time
        thursdayTimeDelta:
          description: Optional time margin in seconds. The departure is expected within a +`thursdayTimeDelta` / -`thursdayTimeDelta` interval around `thursdayTime`. If missing, the `timeDelta` value of `journey` object will be used. If both are missing, 900 is the default value.
          type: integer
          default: 900
        fridayTime:
          description: Time using a UTC partial time string (example "08:30:00") of departure for the journey on Fridays, if any.
          type: string
          format: partial-time
        fridayTimeDelta:
          description: Optional time margin in seconds. The departure is expected within a +`fridayTimeDelta` / -`fridayTimeDelta` interval around `fridayTime`. If missing, the `timeDelta` value of `journey` object will be used. If both are missing, 900 is the default value.
          type: integer
          default: 900
        saturdayTime:
          description: Time using a UTC partial time string (example "08:30:00") of departure for the journey on Saturdays, if any.
          type: string
          format: partial-time
        saturdayTimeDelta:
          description: Optional time margin in seconds. The departure is expected within a +`saturdayTimeDelta` / -`saturdayTimeDelta` interval around `saturdayTime`. If missing, the `timeDelta` value of `journey` object will be used. If both are missing, 900 is the default value.
          type: integer
          default: 900
        sundayTime:
          description: Time using a UTC partial time string (example "08:30:00") of departure for the journey on Sundays, if any.
          type: string
          format: partial-time
        sundayTimeDelta:
          description: Optional time margin in seconds. The departure is expected within a +`sundayTimeDelta` / -`sundayTimeDelta` interval around `sundayTime`. If missing, the `timeDelta` value of `journey` object will be used. If both are missing, 900 is the default value.
          type: integer
          default: 900

    journeyId:
      type: string
      minLength: 1
      maxLength: 255
      description: Journey's id.
        In order to be a basis for carpool proof, this id must match the `journey_id` that could be provided to a carpool proof register as described for example in [this documentation of an open source product for France](https://tech.covoiturage.beta.gouv.fr/partners/preuves/schema.html#schema-json-complet).
    